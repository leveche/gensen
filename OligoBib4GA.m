(***********************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which typically
will have the same name as this file except ending in ".nb" instead of
".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent to
using the Evaluate Initialiation Cells menu command in the front end.

DO NOT EDIT THIS FILE.  This entire file is regenerated automatically 
each time the parent Notebook file is saved in the Mathematica front end.
Any changes you make to this file will be overwritten.
***********************************************************************)



<<Statistics`DescriptiveStatistics`

<<DiscreteMath`Combinatorica`

PrettyPrint[x_]\.03:=Print[HoldForm[x]," = ",x];
SetAttributes[PrettyPrint, HoldAll]



\!\(\*
  RowBox[{
    StyleBox[\(Off[General::spell1]\),
      FontSize->9], "\n", 
    RowBox[{
    \(NumOK = 15\), ";", "\n", \(NumOB = 10\), ";", "\n", 
      \(Print[Binomial[NumOK, NumOB], \ 
        "\< m\[ODoubleDot]gliche Bibliotheken\>"]\), ";", "\n", 
      RowBox[{"Print", "[", 
        RowBox[{"\"\<(\!\(\*GridBox[{
{\(1000\)},
{\(623\)}
}]\)) = \>\"", ",", " ", \(Binomial[1000, 623]\), ",", "\"\< > 10 hoch\>\"", 
          ",", \(IntegerPart[Log[10, Binomial[1246, 623]]]\), ",", " ", 
          "\"\< m\[ODoubleDot]gliche Bibliotheken\>\""}], "]"}], ";", "\n", 
      \(\(N\_+\) = 50\), ";", "\n", \(\(N\_-\) = 35\), ";", "\n", 
      \(O\_K = Table[i, {i, NumOK}]\), " ", ";", "\n", 
      \(\(Q\_+\) = Table[i + Last[O\_K], {i, \(N\_+\)}]\), " ", ";", "\n", 
      \(\(Q\_-\) = Table[i + Last[\(Q\_+\)], {i, \(N\_-\)}]\), " ", ";", 
      "\n", \(SeedRandom[8]\), ";", "\n", 
      StyleBox[\(On[General::spell1]\),
        FontSize->9]}]}]\)





\!\(oligoScore[o_] := 
    \[Sum]\+\(j = First[\(Q\_+\)]\)\%\(Last[\(Q\_+\)]\)match
          \[LeftDoubleBracket]j, o\[RightDoubleBracket] - 
      \[Sum]\+\(j = First[\(Q\_-\)]\)\%\(Last[\(Q\_-\)]\)match
          \[LeftDoubleBracket]j, o\[RightDoubleBracket]\)

\!\(match = Table[0, {j, Last[\(Q\_-\)]}, {k, NumOK}]; \n
  Map[k = #; \n\t
    match\[LeftDoubleBracket]Random[
          Integer, {First[\(Q\_+\)], Last[\(Q\_+\)]}], k
        \[RightDoubleBracket] = 1; \n\t
    Do[\n\t\t\t
      match\[LeftDoubleBracket]Random[
            Integer, {First[\(Q\_+\)], Last[\(Q\_-\)]}], k
          \[RightDoubleBracket] = Random[Integer], {12}]; \n\t\t&, O\_K]; \n
  sortedOk = \ Sort[O\_K, oligoScore[#1] > oligoScore[#2]&]; \n
  oligoScore[First[sortedOk]]\n
  For[j = First[\(Q\_+\)], j \[LessEqual] Last[\(Q\_-\)], \(j++\), \n\t\ \ 
    \(If[match\[LeftDoubleBracket]j, First[sortedOk]\[RightDoubleBracket] 
        \[Equal] 0, \n\t\t\t
      match\[LeftDoubleBracket]j, First[sortedOk]\[RightDoubleBracket] = 1; \n
      \t\t\ \ Break[]; \n\t\t]; \)\n\t]; \n
  For[j = First[\(Q\_+\)], j \[LessEqual] Last[\(Q\_-\)], \(j++\), \n\t\ \ 
    \(If[match\[LeftDoubleBracket]j, First[sortedOk]\[RightDoubleBracket] 
        \[Equal] 0, \n\t\t\t
      match\[LeftDoubleBracket]j, First[sortedOk]\[RightDoubleBracket] = 1; \n
      \t\t\ \ Break[]; \n\t\t]; \)\n\t]; \noligoScore[First[sortedOk]]\n
  For[i = 1, i \[LessEqual] 4, \(i++\), \n\t
    oTemp = Random[Integer, {First[O\_K], Last[O\_K]}]; \n\t
    For[j = First[\(Q\_+\)], j \[LessEqual] Last[\(Q\_-\)], \(j++\), \n\t\t
      \(match\[LeftDoubleBracket]j, 
          sortedOk\[LeftDoubleBracket]oTemp
            \[RightDoubleBracket]\[RightDoubleBracket] = 
        match\[LeftDoubleBracket]j, First[sortedOk]\[RightDoubleBracket]; \)\n
      \t]; \n]; \n
  ListDensityPlot[match, \ Mesh\  -> \ False, AspectRatio \[Rule] 2]; \)







\!\(Match[SeqList_, OligoList_] := Block[{}, \n\t\t\n]; \n
  MatchList[SeqList_, OligoList_] := 
    Block[{o}, \n\t\tmatchList = {}; \n\t\t
      Map[o = #; \n\t\t\t
        matchList = 
          matchList\  \[Union] \ 
            Select[SeqList, 
              match\[LeftDoubleBracket]#1, o\[RightDoubleBracket] == 1&]; \n
        \t\t\t\ &, \ OligoList]; \n\t\tmatchList\n\t\t]; \n
  MatchCount[SeqList_, OligoList_] := 
    Block[{}, \n\t\tLength[MatchList[SeqList, OligoList]]\n\t\t]; \n
  Sensitivity[SeqList_, OligoList_] := 
    Block[{}, \n\t\tMatchCount[SeqList, OligoList]\/Length[SeqList] // N\n
      \t\t]; \n (*\n\t\t\ 
    Sensitivit\[ADoubleDot]t\ der\ Komplement - 
      Menge\ bei\n\t\t\tinvertiertem\ Test\ \n\t*) \n\t
  Specifity[SeqList_, OligoList_] = 
    1 - Sensitivity[Complement[\(Q\_+\) \[Union] \(Q\_-\), SeqList], 
        OligoList]; \n\n
  Uebereinstimmung[OligoList_] := 
    Block[{}, \n
      \t\t (*\ erstmal\ nicht\ allgemeing\[UDoubleDot]ltig\ 
          \(implementiert!\)\ *) \n\t\t
      \(MatchCount[\(Q\_+\), OligoList] + 
            MatchCount[\(Q\_-\), OligoList]\)\/\(\(N\_+\) + \(N\_-\)\) // N\n
      \t\t]; \)







\!\(maxMatch = 
    Max[Table[
        MatchCount[
          \(Q\_+\) \[Union] \(Q\_-\), {
            O\_K\[LeftDoubleBracket]i\[RightDoubleBracket]}], {i, 
          First[O\_K], Last[O\_K]}]]; \n
  ShowHybSignals[OligoList_] := 
    Block[{}, \n
      HybSignalsPlus = 
        Table[\n\t\t\t\t (*\ 
            If[MatchList[
                  \(Q\_+\), {
                    OligoList\[LeftDoubleBracket]i\[RightDoubleBracket]}] 
                \[NotEqual] {}, \n\t\t\t1, 0]\ *) \n\t\t
          MatchCount[
            \(Q\_+\), {OligoList\[LeftDoubleBracket]i\[RightDoubleBracket]}]\n
          \t\t, {i, 1, NumOB}]; \n
      HybSignalsMinus = 
        Table[\n\t\t
          MatchCount[
            \(Q\_-\), {OligoList\[LeftDoubleBracket]i\[RightDoubleBracket]}]\n
          \t\t, {i, 1, NumOB}]; \n\t\t\n\t
      g1 = ListDensityPlot[Thread[{HybSignalsPlus, HybSignalsPlus}], \ 
          Mesh\  -> \ False, AspectRatio \[Rule] 5, 
          PlotRange \[Rule] {0, maxMatch}, DisplayFunction \[Rule] Identity]; 
      \n\tg2 = ListDensityPlot[Thread[{HybSignalsMinus, HybSignalsMinus}], \ 
          Mesh\  -> \ False, AspectRatio \[Rule] 5, 
          PlotRange \[Rule] {0, maxMatch}, DisplayFunction \[Rule] Identity]; 
      \n\tg3 = Graphics[{
            Text[ToString[Sensitivity[\(Q\_+\), OligoList]], {1, 0}, {
                \(-0.5\), 0}]}]; \n
      \t\t (*\n\t
        g3 = Graphics[{Thickness[ .2], RGBColor[1, 0, 0], 
              Line[{{1, 0}, {1, 1}}], Line[{{0, 0}, {0, 0.9}}]}]; \n\t\t\t*) 
        \n\tShow[GraphicsArray[{{g1, g2, g3}}]]; \n\t]\)





\!\(f[x_, s_, w_] := 
    \[Sum]\+\(j = 1\)\%\(Length[s]\)w\[LeftDoubleBracket]j
          \[RightDoubleBracket]\ 
        match\[LeftDoubleBracket]x, 
          s\[LeftDoubleBracket]j\[RightDoubleBracket]\[RightDoubleBracket]\n
  f2[x_, s_] := 
    N[\[Sum]\+\(j = 1\)\%\(Length[s]\)match\[LeftDoubleBracket]x, 
          s\[LeftDoubleBracket]j\[RightDoubleBracket]\[RightDoubleBracket]]\n
  ff[x_, fs_] := 
    \[Sum]\+\(j = First[O\_K]\)\%\(Last[O\_K]\)fs\[LeftDoubleBracket]j, 1
          \[RightDoubleBracket] 
        fs\[LeftDoubleBracket]j, 2\[RightDoubleBracket]\ 
        match\[LeftDoubleBracket]x, j\[RightDoubleBracket]\)

\!\(\*
  RowBox[{
  \(Score[s_, w_] := 
      Block[{}, \n
        \t\t (*\ \(F\&^\_+\) = 
            \(\[Sum]\+\(i = First[\(Q\_+\)]\)\%\(Last[\(Q\_+\)]\)f[i, s, w]
                  \)\/\(N\_+\); \ \ *) \n\t\t
        \(F\&^\_+\) = 
          Mean[Table[f[i, s, w], {i, First[\(Q\_+\)], Last[\(Q\_+\)]}]]; \n
        \t\t (*\ \(F\&^\_-\) = 
            \(\[Sum]\+\(i = First[\(Q\_-\)]\)\%\(Last[\(Q\_-\)]\)f[i, s, w]
                  \)\/\(N\_-\); \ \ *) \n\t\t
        \(F\&^\_-\) = 
          Mean[Table[f[i, s, w], {i, First[\(Q\_-\)], Last[\(Q\_-\)]}]]; \n
        \t\t\(\[Sigma]\_+\) = 
          StandardDeviation[
            Table[f[i, s, w], {i, First[\(Q\_+\)], Last[\(Q\_+\)]}]]; \n\t\t
        \(\[Sigma]\_-\) = 
          StandardDeviation[
            Table[f[i, s, w], {i, First[\(Q\_-\)], Last[\(Q\_-\)]}]]; \n\t\t
        \(\(F\&^\_+\) - \(F\&^\_-\)\)\/\(\(\[Sigma]\_+\) + 
            \(\[Sigma]\_-\)\)\n]\), ";", "\n", 
    \(Score2[s_] := 
      Block[{}, \n
        \t\t (*\ \(F\&^\_+\) = 
            \(\[Sum]\+\(i = First[\(Q\_+\)]\)\%\(Last[\(Q\_+\)]\)f[i, s, w]
                  \)\/\(N\_+\); \ \ *) \n\t\t
        \(F\&^\_+\) = 
          Mean[Table[f2[i, s], {i, First[\(Q\_+\)], Last[\(Q\_+\)]}]]; \n
        \t\t (*\ \(F\&^\_-\) = 
            \(\[Sum]\+\(i = First[\(Q\_-\)]\)\%\(Last[\(Q\_-\)]\)f[i, s, w]
                  \)\/\(N\_-\); \ \ *) \n\t\t
        \(F\&^\_-\) = 
          Mean[Table[f2[i, s], {i, First[\(Q\_-\)], Last[\(Q\_-\)]}]]; \n\t\t
        \(\[Sigma]\_+\) = 
          StandardDeviation[
            Table[f2[i, s], {i, First[\(Q\_+\)], Last[\(Q\_+\)]}]]; \n\t\t
        \(\[Sigma]\_-\) = 
          StandardDeviation[
            Table[f2[i, s], {i, First[\(Q\_-\)], Last[\(Q\_-\)]}]]; \n\t\t
        \(\(F\&^\_+\) - \(F\&^\_-\)\)\/\(\(\[Sigma]\_+\) + 
            \(\[Sigma]\_-\)\)\n]\), ";", "\n", 
    RowBox[{"(*", " ", 
      RowBox[{"hier", " ", "mit", " ", "der", " ", 
        StyleBox["Spezifit\[ADoubleDot]t",
          FontSize->13,
          FontColor->RGBColor[1, 0, 0]], 
        StyleBox[" ",
          FontSize->13,
          FontColor->RGBColor[1, 0, 0]], 
        StyleBox[\(\(weitermachen!!\)!\),
          FontSize->13,
          FontColor->RGBColor[1, 0, 0]]}], " ", "*)"}], "\n", 
    \(Score3[s_] := Sensitivity[\(Q\_+\), s] + Specifity[\(Q\_+\), s]\), ";"}]
    \)

































































































































































NBib=NumOB;
Individuum=Flatten[Table[{_Integer},{NBib}]];(* 
  ein Typ "Array of Integer"  *)
NPop=50;
NumGen = 1000;



Clear[value];
value[c:Individuum]:=Score3[c];
value[c:Flatten[Table[{_},{NBib}]]]:=Print["value: no List of Integers!"];
value[c:_]:=Print["value: wrong argument type!"];



Fitness[pop_]:=Map[value,pop];


SurvivalChance[pop_]:=Map[(# /Plus@@pop)&,Fitness[pop]];
(* n Kopien der Liste list *)
(* Zusammenstellung eines Genpools entsprechend der
			survivalchances s einer Population pop.			*)
GenPool[s_,p_]:=Flatten[GenPool1[s,p],1]
GenPool1[{},pop_]:={}
GenPool1[survivalchances_,pop_]:=
  Join[List[GenPool[Rest[survivalchances],Rest[pop]]],
    List[Dublicate[First[pop],First[survivalchances]]]]
(* Beispiel:
  GenPool[{2,3},{{a,a},{b,b}}]=
			{{a,a},{a,a},{b,b},{b,b},{b,b}}
*)

(* Berechnung einer neuen Generation (NG)
		einer Population. pop ist die alte Population,
	 NPop die Anzahl der Individuen der neuen Population.
		Die neuen Individuen werden zuf\[ADoubleDot]llig aus dem 
		Genpool gezogen, indem die Individuenkandidaten 
		entsprechend der Fitness unterschiedlich 
		h\[ADoubleDot]ufig vorkommen. 
		Anstatt der Funktion Fitness kann 
		auch die Funktion Survivers verwendet werden. (??)
			*)
NG[pop_,NPop_]:=NG1[NPop,GenPool[Fitness[pop],pop]];
NG1[NPop_,gp_]:=Part[gp,Table[Random[Integer,{1,Length[gp]}],{NPop}]];

(*
	- nGmn: langsamere aber platzsparende Alternative zu NG
	- Auch sinnvoll, wenn Fitness keine ganzen Zahlen enth\[ADoubleDot]lt
	- kann durch rekursiver Suche auf der sortierten Liste distributionFkt
	  beschleunigt werden
	*)
nGmn[pop_]:=Module[{pos,tmp},
		distributionFkt=Table[Plus@@Take[Fitness[pop],n],{n,0,Length[pop]}];
		Table[
				tmp=Random[Integer,{1,Last[distributionFkt]}];
				For[pos=Length[pop],(*pos\[GreaterEqual]1\[And]*)
													
        distributionFkt\[LeftDoubleBracket]pos
            \[RightDoubleBracket]\[GreaterEqual]tmp,
													pos--,					
					];
				pop\[LeftDoubleBracket]pos\[RightDoubleBracket],{Length[pop]}]
		];

(* Die Listen l1 und l2 werden an einer zuf\[ADoubleDot]lligen Stelle
			\[UDoubleDot]berkreuzt.
				*)	
Crossover[l1_,l2_]:=Crossover1[l1,l2,Random[Integer,{1,Length[l1]}]]
Crossover1[l1_,l2_,p_]:=
  List[Flatten[Append[Take[l1,p],Take[l2,p-Length[l1]]]],
		Flatten[Append[Take[l2,p],Take[l1,p-Length[l2]]]]]

(* Jeweils zwei benachbarte Elemente der Liste l werden mit der Funktion 
    crossover bearbeitet. Bedingung: Anzahl der Elemente der Liste l gerade
				*)
Crossall[l_]:=
  If[l=={},{},
    Join[Crossover[Flatten[Take[l,1]],Flatten[Take[l,{2,2}]]],
      Crossall[Drop[l,2]]]]
(* Beispiele:Crossall[{{1,2,3,5},{a,b,c,d},{1,3,4},{x,y,z}}]
  Crossover[{1,2,3},{a,b,c}]
*)
MutatePop[pop_]:=Map[Mutate,pop]
Mutate[ind_]:=
  If[Random[Real]>.1,
    ReplacePart[ind,Random[Integer],Random[Integer,{1,Length[ind]}]],ind]







































































































































Pop0=Table[Random[Integer],{NPop},{NBib}];
Pop1=Table[Random[Integer],{10},{NBib}];
Pop2=Table[Random[Integer],{20},{NBib}];
Pop3=Table[Random[Integer],{30},{NBib}];
Pop4=Table[Random[Integer],{50},{NBib}];

